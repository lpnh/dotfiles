//
//                 ██           ██  
//       ▄▄ ▄▄▄   ▄▄▄  ▄▄▄ ▄▄  ▄▄▄  
//        ██  ██   ██   ██▀ ▀▀  ██  
//        ██  ██   ██   ██      ██  
//       ▄██▄ ██▄ ▄██▄ ▄██▄    ▄██▄ 
//                                  
//    ▄▄·          ▐ ▄  ·▄▄▄ ▪    ▄▄ • 
//   ▐█ ▌▪  ▄█▀▄  •█▌▐█ ▐▄▄  ██  ▐█ ▀ ▪
//   ██ ▄▄ ▐█▌.▐▌ ▐█▐▐▌ █  ▪ ▐█· ▄█ ▀█▄
//   ▐███▌ ▐█▌.▐▌ ██▐█▌ ██ . ▐█▌ ▐█▄▪▐█
//   ·▀▀▀   ▀█▄▀▪ ▀▀ █▪ ▀▀▀  ▀▀▀ ·▀▀▀▀ 
//

// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

// Input [[[

input {
    // For more information, see xkeyboard-config(7)
    keyboard {
        xkb {
            {{- if eq .chezmoi.hostname "desktop" }}
            layout "us,us(intl)"
            options "grp:alt_shift_toggle,compose:ralt"
            {{- else if eq .chezmoi.hostname "laptop" }}
            layout "br"
            {{- end }}
        }
    }

    touchpad {
        tap
        dwt
        // dwtp
        natural-scroll
        accel-speed 1.0
        // accel-profile "flat"
        // tap-button-map "left-middle-right"
        // click-method "clickfinger"
    }

    tablet {
        {{- if eq .chezmoi.hostname "desktop" }}
        map-to-output "HDMI-A-1"
        {{- end }}
    }

    // Make the mouse warp to the center of newly focused windows
    warp-mouse-to-focus
}

// ]]]

// Output [[[

{{- if eq .chezmoi.hostname "desktop" }}
output "DP-2" {
    position x=0 y=48
}

output "HDMI-A-1" {
    position x=1280 y=0
}
{{- end }}

// ]]]

// Layout [[[

layout {
    gaps 8
    center-focused-column "never"

    preset-column-widths {
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
    }

    default-column-width { proportion 0.5; }

    focus-ring {
        off

        width 1
        active-gradient from="rgba(245, 194, 231, 0.6)" to="rgba(180, 190, 254, 0.6)" angle=45
        inactive-gradient from="rgb(69, 71, 90)" to="rgb(49, 50, 68)" angle=45
    }

    border {
        // off

        width 1
        active-gradient from="rgba(243, 139, 168, 0.9)" to="rgba(203, 166, 247, 0.9)" angle=45 in="oklch decreasing hue"
        inactive-gradient from="rgba(69, 71, 90, 0.9)" to="rgba(88, 91, 112, 0.9)" angle=45 in="oklch decreasing hue"
    }

    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }

    background-color "transparent"
}

// ]]]

// Miscellaneous [[[

environment {
    GTK_THEME "Materia-dark"
    QT_QPA_PLATFORM "wayland"
    QT_WAYLAND_DISABLE_WINDOWDECORATION "1"
}

cursor {
    xcursor-theme "Breeze"
}

prefer-no-csd

// The path is formatted with strftime(3) to give you the screenshot date and time
screenshot-path "~/Pictures/Screenshots/ss %Y-%m-%d %H-%M-%S.png"

// Disable the hotkey help at niri startup
hotkey-overlay {
    skip-at-startup
}

// ]]]

// Animations [[[

animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0

    // Workspace switch [[[

    workspace-switch {
        off
        // spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001
    }

    // ]]]

    // Window open [[[

    window-open {
        // off
        duration-ms 250
        curve "linear"

        custom-shader r"
            // Example: fill the current geometry with a solid vertical gradient and
            // gradually make opaque.
            vec4 solid_gradient(vec3 coords_geo, vec3 size_geo) {
                vec4 color = vec4(0.0);

                // Paint only the area inside the current geometry.
                if (0.0 <= coords_geo.x && coords_geo.x <= 1.0
                        && 0.0 <= coords_geo.y && coords_geo.y <= 1.0)
                {
                    vec4 from = vec4(1.0, 0.0, 0.0, 1.0);
                    vec4 to = vec4(0.0, 1.0, 0.0, 1.0);
                    color = mix(from, to, coords_geo.y);
                }

                // Make it opaque.
                color *= niri_clamped_progress;

                return color;
            }

            // Example: gradually scale up and make opaque, equivalent to the default
            // opening animation.
            vec4 default_open(vec3 coords_geo, vec3 size_geo) {
                // Scale up the window.
                float scale = max(0.0, (niri_progress / 2.0 + 0.5));
                coords_geo = vec3((coords_geo.xy - vec2(0.5)) / scale + vec2(0.5), 1.0);

                // Get color from the window texture.
                vec3 coords_tex = niri_geo_to_tex * coords_geo;
                vec4 color = texture2D(niri_tex, coords_tex.st);

                // Make the window opaque.
                color *= niri_clamped_progress;

                return color;
            }

            // Example: show the window as an expanding circle.
            // Recommended setting: duration-ms 250
            vec4 expanding_circle(vec3 coords_geo, vec3 size_geo) {
                vec3 coords_tex = niri_geo_to_tex * coords_geo;
                vec4 color = texture2D(niri_tex, coords_tex.st);

                vec2 coords = (coords_geo.xy - vec2(0.5, 0.5)) * size_geo.xy * 2.0;
                coords = coords / length(size_geo.xy);
                float p = niri_clamped_progress;
                if (p * p <= dot(coords, coords))
                    color = vec4(0.0);

                return color;
            }

            // This is the function that you must define.
            vec4 open_color(vec3 coords_geo, vec3 size_geo) {
                // You can pick one of the example functions or write your own.
                return default_open(coords_geo, size_geo);
            }
        "
    }

    // ]]]

    // Window close [[[

    window-close {
        // off
        duration-ms 250
        curve "ease-out-quad"

        custom-shader r"
            // Example: fill the current geometry with a solid vertical gradient and
            // gradually make transparent.
            vec4 solid_gradient(vec3 coords_geo, vec3 size_geo) {
                vec4 color = vec4(0.0);

                // Paint only the area inside the current geometry.
                if (0.0 <= coords_geo.x && coords_geo.x <= 1.0
                    && 0.0 <= coords_geo.y && coords_geo.y <= 1.0)
                {
                    vec4 from = vec4(1.0, 0.0, 0.0, 1.0);
                    vec4 to = vec4(0.0, 1.0, 0.0, 1.0);
                    color = mix(from, to, coords_geo.y);
                }

                // Make it transparent.
                color *= (1.0 - niri_clamped_progress);

                return color;
            }

            // Example: gradually scale down and make transparent, equivalent to the
            // default closing animation.
            vec4 default_close(vec3 coords_geo, vec3 size_geo) {
                // Scale down the window.
                float scale = max(0.0, ((1.0 - niri_clamped_progress) / 5.0 + 0.8));
                coords_geo = vec3((coords_geo.xy - vec2(0.5)) / scale + vec2(0.5), 1.0);

                // Get color from the window texture.
                vec3 coords_tex = niri_geo_to_tex * coords_geo;
                vec4 color = texture2D(niri_tex, coords_tex.st);

                // Make the window transparent.
                color *= (1.0 - niri_clamped_progress);

                return color;
            }

            // Example: make the window 'fall down' with slight rotation.
            vec4 fall_and_rotate(vec3 coords_geo, vec3 size_geo) {
                // For this shader, set animation curve to linear for best results.

                // Simulate an accelerated fall: square the (linear) progress.
                float progress = niri_clamped_progress * niri_clamped_progress;

                // Get our rotation pivot point coordinates at the bottom center of the window.
                vec2 coords = (coords_geo.xy - vec2(0.5, 1.0)) * size_geo.xy;

                // Move the window down to simulate a fall.
                coords.y -= progress * 200.0;

                // Randomize rotation direction and maximum angle.
                float random = (niri_random_seed - 0.5) / 2.0;
                random = sign(random) - random;
                float max_angle = 0.05 * random;

                // Rotate the window around our pivot point.
                float angle = progress * max_angle;
                mat2 rotate = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
                coords = rotate * coords;

                // Transform the coordinates back.
                coords_geo = vec3(coords / size_geo.xy + vec2(0.5, 1.0), 1.0);

                // Sample the window texture.
                vec3 coords_tex = niri_geo_to_tex * coords_geo;
                vec4 color = texture2D(niri_tex, coords_tex.st);

                // Multiply by alpha to fade out.
                return color * (1.0 - niri_clamped_progress);
            }

            vec4 close_color(vec3 coords_geo, vec3 size_geo) {
                // You can pick one of the example functions or write your own.
                return default_close(coords_geo, size_geo);
            }
        "
    }

    // ]]]

    // Horizontal view movement [[[

    horizontal-view-movement {
        // off
        duration-ms 250
        curve "ease-out-quad"
    }

    // ]]]

    // Window movement [[[

    window-movement {
        // off
        duration-ms 250
        curve "ease-out-quad"
    }

    // ]]]

    // Window resize [[[

    window-resize {
        off
        duration-ms 250
        curve "ease-out-quad"

        custom-shader r"
            // Example: fill the current geometry with a solid vertical gradient.
            vec4 solid_gradient(vec3 coords_curr_geo, vec3 size_curr_geo) {
                vec3 coords = coords_curr_geo;
                vec4 color = vec4(0.0);

                // Paint only the area inside the current geometry.
                if (0.0 <= coords.x && coords.x <= 1.0
                        && 0.0 <= coords.y && coords.y <= 1.0)
                {
                    vec4 from = vec4(1.0, 0.0, 0.0, 1.0);
                    vec4 to = vec4(0.0, 1.0, 0.0, 1.0);
                    color = mix(from, to, coords.y);
                }

                return color;
            }

            // Example: crossfade between previous and next texture, stretched to the
            // current geometry.
            vec4 crossfade(vec3 coords_curr_geo, vec3 size_curr_geo) {
                // Convert coordinates into the texture space for sampling.
                vec3 coords_tex_prev = niri_geo_to_tex_prev * coords_curr_geo;
                vec4 color_prev = texture2D(niri_tex_prev, coords_tex_prev.st);

                // Convert coordinates into the texture space for sampling.
                vec3 coords_tex_next = niri_geo_to_tex_next * coords_curr_geo;
                vec4 color_next = texture2D(niri_tex_next, coords_tex_next.st);

                vec4 color = mix(color_prev, color_next, niri_clamped_progress);
                return color;
            }

            // Example: next texture, stretched to the current geometry.
            vec4 stretch_next(vec3 coords_curr_geo, vec3 size_curr_geo) {
                vec3 coords_tex_next = niri_geo_to_tex_next * coords_curr_geo;
                vec4 color = texture2D(niri_tex_next, coords_tex_next.st);
                return color;
            }

            // Example: next texture, stretched to the current geometry if smaller, and
            // cropped if bigger.
            vec4 stretch_or_crop_next(vec3 coords_curr_geo, vec3 size_curr_geo) {
                vec3 coords_next_geo = niri_curr_geo_to_next_geo * coords_curr_geo;

                vec3 coords_stretch = niri_geo_to_tex_next * coords_curr_geo;
                vec3 coords_crop = niri_geo_to_tex_next * coords_next_geo;

                // We can crop if the current window size is smaller than the next window
                // size. One way to tell is by comparing to 1.0 the X and Y scaling
                // coefficients in the current-to-next transformation matrix.
                bool can_crop_by_x = niri_curr_geo_to_next_geo[0][0] <= 1.0;
                bool can_crop_by_y = niri_curr_geo_to_next_geo[1][1] <= 1.0;

                vec3 coords = coords_stretch;
                if (can_crop_by_x)
                    coords.x = coords_crop.x;
                if (can_crop_by_y)
                    coords.y = coords_crop.y;

                vec4 color = texture2D(niri_tex_next, coords.st);

                // However, when we crop, we also want to crop out anything outside the
                // current geometry. This is because the area of the shader is unspecified
                // and usually bigger than the current geometry, so if we don't fill pixels
                // outside with transparency, the texture will leak out.
                //
                // When stretching, this is not an issue because the area outside will
                // correspond to client-side decoration shadows, which are already supposed
                // to be outside.
                if (can_crop_by_x && (coords_curr_geo.x < 0.0 || 1.0 < coords_curr_geo.x))
                    color = vec4(0.0);
                if (can_crop_by_y && (coords_curr_geo.y < 0.0 || 1.0 < coords_curr_geo.y))
                    color = vec4(0.0);

                return color;
            }

            // Example: cropped next texture if it's bigger than the current geometry, and
            // crossfade between previous and next texture otherwise.
            vec4 crossfade_or_crop_next(vec3 coords_curr_geo, vec3 size_curr_geo) {
                vec3 coords_next_geo = niri_curr_geo_to_next_geo * coords_curr_geo;
                vec3 coords_prev_geo = niri_curr_geo_to_prev_geo * coords_curr_geo;

                vec3 coords_crop = niri_geo_to_tex_next * coords_next_geo;
                vec3 coords_stretch = niri_geo_to_tex_next * coords_curr_geo;
                vec3 coords_stretch_prev = niri_geo_to_tex_prev * coords_curr_geo;

                // We can crop if the current window size is smaller than the next window
                // size. One way to tell is by comparing to 1.0 the X and Y scaling
                // coefficients in the current-to-next transformation matrix.
                bool can_crop_by_x = niri_curr_geo_to_next_geo[0][0] <= 1.0;
                bool can_crop_by_y = niri_curr_geo_to_next_geo[1][1] <= 1.0;
                bool crop = can_crop_by_x && can_crop_by_y;

                vec4 color;

                if (crop) {
                    // However, when we crop, we also want to crop out anything outside the
                    // current geometry. This is because the area of the shader is unspecified
                    // and usually bigger than the current geometry, so if we don't fill pixels
                    // outside with transparency, the texture will leak out.
                    //
                    // When crossfading, this is not an issue because the area outside will
                    // correspond to client-side decoration shadows, which are already supposed
                    // to be outside.
                    if (coords_curr_geo.x < 0.0 || 1.0 < coords_curr_geo.x ||
                        coords_curr_geo.y < 0.0 || 1.0 < coords_curr_geo.y) {
                        color = vec4(0.0);
                    } else {
                        color = texture2D(niri_tex_next, coords_crop.st);
                    }
                } else {
                    // If we can't crop, then crossfade.
                    color = texture2D(niri_tex_next, coords_stretch.st);
                    vec4 color_prev = texture2D(niri_tex_prev, coords_stretch_prev.st);
                    color = mix(color_prev, color, niri_clamped_progress);
                }

                return color;
            }

            vec4 resize_color(vec3 coords_curr_geo, vec3 size_curr_geo) {
                // You can pick one of the example functions or write your own.
                return crossfade_or_crop_next(coords_curr_geo, size_curr_geo);
            }
        "
    }

    // ]]]

    // Config notification [[[

    config-notification-open-close {
        off
        // spring damping-ratio=0.6 stiffness=1000 epsilon=0.001
    }

    // ]]]
}

// ]]]

// Workspaces [[[

{{- if eq .chezmoi.hostname "desktop" }}
workspace "main" {
    open-on-output "HDMI-A-1"
}

workspace "browser" {
    open-on-output "DP-2"
}

workspace "lounge" {
    open-on-output "HDMI-A-1"
}
{{- else if eq .chezmoi.hostname "laptop" }}
workspace "main" {}

workspace "browser" {}

workspace "lounge" {}
{{- end }}

// ]]]

// Window Rules [[[

window-rule {
    geometry-corner-radius 8
    clip-to-geometry true
}

window-rule {
    open-maximized true
}

window-rule {
    match at-startup=true app-id="Alacritty"
    match title="Minecraft"
    open-on-workspace "main"
}

window-rule {
    match at-startup=true app-id="firefox-nightly"
    open-on-workspace "browser"
}

window-rule {
    match app-id="(ncspot|discord)"
    open-on-workspace "lounge"
}

// ]]]

// Layer Rules [[[

layer-rule {
    match namespace="^wallpaper$"
    place-within-backdrop true
}

// ]]]

// Key Bindings [[[

binds {
    // Session [[[

    Mod+Shift+Slash { show-hotkey-overlay; }

    Mod+Shift+E { quit; }

    Pause { spawn "~/.config/swaylock/lock-screen.fish"; }
    Mod+Pause { spawn "reboot"; }
    Ctrl+Mod+Pause { spawn "poweroff"; }

    Print { screenshot-screen; }
    Ctrl+Print { screenshot-window; }
    Alt+Print { screenshot; }

    Mod+Shift+P { power-off-monitors; }

    // ]]]

    // Control [[[

    XF86AudioRaiseVolume { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05+"; }
    XF86AudioLowerVolume { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05-"; }
    XF86AudioMute { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }

    XF86MonBrightnessUp { spawn "brightnessctl" "--class=backlight" "set" "10%+"; }
    XF86MonBrightnessDown { spawn "brightnessctl" "--class=backlight" "set" "10%-"; }

    // ]]]

    // Main apps [[[

    Mod+Return { spawn "fuzzel"; }
    Mod+Space { spawn "killall" "-SIGUSR1" "waybar"; }
    Mod+A { spawn "alacritty"; }
    Mod+B { spawn "firefox-nightly"; }
    Mod+Shift+B { spawn "blender"; }
    Mod+C { spawn "steam" "steam://rungameid/730"; }
    Mod+Shift+D { spawn "env" "DISPLAY=:0" "discord"; }
    Mod+M { spawn "prismlauncher"; }
    Mod+P { spawn "steam" "steam://rungameid/431730"; }
    Mod+N { spawn "alacritty" "--class" "ncspot" "-T" "ncspot" "-e" "ncspot"; }
    Mod+T { spawn "thunderbird"; }
    Mod+Y { spawn "alacritty" "--class" "yazi" "-T" "yazi" "-e" "yazi"; }

    {{- if eq .chezmoi.hostname "desktop" }}
    Mod+D { spawn "env" "DISPLAY=:0" "ankama-launcher"; }
    Mod+O { spawn "osu-lazer"; }
    Mod+S { spawn "env" "DISPLAY=:0" "steam"; }
    {{- else if eq .chezmoi.hostname "laptop" }}
    Mod+D { spawn "env" "DISPLAY=:0" "prime-run" "ankama-launcher"; }
    Mod+O { spawn "prime-run" "osu-lazer"; }
    Mod+S { spawn "env" "DISPLAY=:0" "prime-run" "steam"; }
    {{- end }}

    // ]]]

    // Focus [[[

    // Mod+H     { focus-column-left; }
    // Mod+L     { focus-column-right; }

    Mod+H     { focus-column-or-monitor-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-or-monitor-right; }

    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }

    Mod+Alt+H { focus-column-first; }
    Mod+Alt+L { focus-column-last; }

    Mod+Shift+H     { focus-monitor-left; }
    Mod+Shift+L     { focus-monitor-right; }

    Mod+Shift+J        { focus-workspace-down; }
    Mod+Shift+K        { focus-workspace-up; }

    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }

    Mod+Tab { focus-workspace-previous; }

    // ]]]

    // Move [[[

    Mod+Ctrl+H     { move-column-left; }
    Mod+Ctrl+J     { move-window-down; }
    Mod+Ctrl+K     { move-window-up; }
    Mod+Ctrl+L     { move-column-right; }

    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Ctrl+Alt+H { move-column-to-first; }
    Mod+Ctrl+Alt+L { move-column-to-last; }

    Mod+Ctrl+Shift+J   { move-column-to-workspace-down; }
    Mod+Ctrl+Shift+K   { move-column-to-workspace-up; }

    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }

    Mod+Shift+1 { move-column-to-workspace "main"; }
    Mod+Shift+2 { move-column-to-workspace "browser"; }
    Mod+Shift+3 { move-column-to-workspace "lounge"; }
    Mod+Shift+4 { move-column-to-workspace 4; }

    // ]]]

    // Columns and windows [[[

    Mod+Q { close-window; }

    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    Mod+R { switch-preset-column-width; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }

    // Finer width adjustments
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // ]]]
}

// ]]]

// Startup [[[

spawn-at-startup "alacritty"
spawn-at-startup "firefox-nightly"
spawn-at-startup "niri" "msg" "action" "focus-workspace" "main"

// ]]]

// vim:fdm=marker:fmr=[[[,]]]
